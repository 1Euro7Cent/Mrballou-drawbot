{"version":3,"sources":["../../src/utils/image-bitmap.js"],"names":["fileType","EXIFParser","throwError","constants","MIME","promisify","getMIMEFromBuffer","buffer","path","fileTypeFromBuffer","mime","getType","exifRotate","img","exif","_exif","tags","Orientation","mirror","rotate","parseBitmap","data","cb","Error","_originalMime","toLowerCase","getMIME","constructor","decoders","bitmap","call","error","create","parse","compositeBitmapOverBackground","Jimp","image","width","height","_background","composite","getBuffer","AUTO","_rgba","hasAlpha","Buffer","from","encoders","getBufferAsync"],"mappings":"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","sourcesContent":["import fileType from 'file-type';\n\nimport EXIFParser from 'exif-parser';\nimport { throwError } from '@jimp/utils';\n\nimport * as constants from '../constants';\nimport * as MIME from './mime';\nimport promisify from './promisify';\n\nfunction getMIMEFromBuffer(buffer, path) {\n  const fileTypeFromBuffer = fileType(buffer);\n\n  if (fileTypeFromBuffer) {\n    // If fileType returns something for buffer, then return the mime given\n    return fileTypeFromBuffer.mime;\n  }\n\n  if (path) {\n    // If a path is supplied, and fileType yields no results, then retry with MIME\n    // Path can be either a file path or a url\n    return MIME.getType(path);\n  }\n\n  return null;\n}\n\n/*\n * Automagically rotates an image based on its EXIF data (if present)\n * @param img a constants object\n */\nfunction exifRotate(img) {\n  const exif = img._exif;\n\n  if (exif && exif.tags && exif.tags.Orientation) {\n    switch (img._exif.tags.Orientation) {\n      case 1: // Horizontal (normal)\n        // do nothing\n        break;\n      case 2: // Mirror horizontal\n        img.mirror(true, false);\n        break;\n      case 3: // Rotate 180\n        img.rotate(180);\n        break;\n      case 4: // Mirror vertical\n        img.mirror(false, true);\n        break;\n      case 5: // Mirror horizontal and rotate 270 CW\n        img.rotate(-90).mirror(true, false);\n        break;\n      case 6: // Rotate 90 CW\n        img.rotate(-90);\n        break;\n      case 7: // Mirror horizontal and rotate 90 CW\n        img.rotate(90).mirror(true, false);\n        break;\n      case 8: // Rotate 270 CW\n        img.rotate(-270);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return img;\n}\n\n// parses a bitmap from the constructor to the JIMP bitmap property\nexport function parseBitmap(data, path, cb) {\n  const mime = getMIMEFromBuffer(data, path);\n\n  if (typeof mime !== 'string') {\n    return cb(new Error('Could not find MIME for Buffer <' + path + '>'));\n  }\n\n  this._originalMime = mime.toLowerCase();\n\n  try {\n    const mime = this.getMIME();\n\n    if (this.constructor.decoders[mime]) {\n      this.bitmap = this.constructor.decoders[mime](data);\n    } else {\n      return throwError.call(this, 'Unsupported MIME type: ' + mime, cb);\n    }\n  } catch (error) {\n    return cb.call(this, error, this);\n  }\n\n  try {\n    this._exif = EXIFParser.create(data).parse();\n    exifRotate(this); // EXIF data\n  } catch (error) {\n    /* meh */\n  }\n\n  cb.call(this, null, this);\n\n  return this;\n}\n\nfunction compositeBitmapOverBackground(Jimp, image) {\n  return new Jimp(\n    image.bitmap.width,\n    image.bitmap.height,\n    image._background\n  ).composite(image, 0, 0).bitmap;\n}\n\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\nexport function getBuffer(mime, cb) {\n  if (mime === constants.AUTO) {\n    // allow auto MIME detection\n    mime = this.getMIME();\n  }\n\n  if (typeof mime !== 'string') {\n    return throwError.call(this, 'mime must be a string', cb);\n  }\n\n  if (typeof cb !== 'function') {\n    return throwError.call(this, 'cb must be a function', cb);\n  }\n\n  mime = mime.toLowerCase();\n\n  if (this._rgba && this.constructor.hasAlpha[mime]) {\n    this.bitmap.data = Buffer.from(this.bitmap.data);\n  } else {\n    // when format doesn't support alpha\n    // composite onto a new image so that the background shows through alpha channels\n    this.bitmap.data = compositeBitmapOverBackground(\n      this.constructor,\n      this\n    ).data;\n  }\n\n  if (this.constructor.encoders[mime]) {\n    const buffer = this.constructor.encoders[mime](this);\n    cb.call(this, null, buffer);\n  } else {\n    cb.call(this, 'Unsupported MIME type: ' + mime);\n  }\n\n  return this;\n}\n\nexport function getBufferAsync(mime) {\n  return promisify(getBuffer, this, mime);\n}\n"],"file":"image-bitmap.js"}