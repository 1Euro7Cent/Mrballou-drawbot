const chillout = require("chillout");
/**
 * @param {{width:number,height:number,data:Uint8ClampedArray|Buffer}} bitmap
 * @param {Number} factor
 */
async function dither(bitmap, factor = 5) {

    bitmap.data = new Uint8ClampedArray(bitmap.data);

    await chillout.repeat(bitmap.height - 1, async (y) => {
        await chillout.repeat(bitmap.width - 1, async (x) => {
            let index = calcIndex(x, y, bitmap.width);

            let red = bitmap.data[index];
            let green = bitmap.data[index + 1];
            let blue = bitmap.data[index + 2];

            let newRed = Math.round(factor * red / 255) * (255 / factor);
            let newGreen = Math.round(factor * green / 255) * (255 / factor);
            let newBlue = Math.round(factor * blue / 255) * (255 / factor);

            bitmap.data[index] = newRed;
            bitmap.data[index + 1] = newGreen;
            bitmap.data[index + 2] = newBlue;

            let errorRed = red - newRed;
            let errorGreen = green - newGreen;
            let errorBlue = blue - newBlue;

            bitmap.data[calcIndex(x + 1, y, bitmap.width)] = bitmap.data[calcIndex(x + 1, y, bitmap.width)] + errorRed * 7 / 16;
            bitmap.data[calcIndex(x + 1, y, bitmap.width) + 1] = bitmap.data[calcIndex(x + 1, y, bitmap.width) + 1] + errorGreen * 7 / 16;
            bitmap.data[calcIndex(x + 1, y, bitmap.width) + 2] = bitmap.data[calcIndex(x + 1, y, bitmap.width) + 2] + errorBlue * 7 / 16;

            bitmap.data[calcIndex(x - 1, y + 1, bitmap.width)] = bitmap.data[calcIndex(x - 1, y + 1, bitmap.width)] + errorRed * 3 / 16;
            bitmap.data[calcIndex(x - 1, y + 1, bitmap.width) + 1] = bitmap.data[calcIndex(x - 1, y + 1, bitmap.width) + 1] + errorGreen * 3 / 16;
            bitmap.data[calcIndex(x - 1, y + 1, bitmap.width) + 2] = bitmap.data[calcIndex(x - 1, y + 1, bitmap.width) + 2] + errorBlue * 3 / 16;

            bitmap.data[calcIndex(x, y + 1, bitmap.width)] = bitmap.data[calcIndex(x, y + 1, bitmap.width)] + errorRed * 5 / 16;
            bitmap.data[calcIndex(x, y + 1, bitmap.width) + 1] = bitmap.data[calcIndex(x, y + 1, bitmap.width) + 1] + errorGreen * 5 / 16;
            bitmap.data[calcIndex(x, y + 1, bitmap.width) + 2] = bitmap.data[calcIndex(x, y + 1, bitmap.width) + 2] + errorBlue * 5 / 16;

            bitmap.data[calcIndex(x + 1, y + 1, bitmap.width)] = bitmap.data[calcIndex(x + 1, y + 1, bitmap.width)] + errorRed * 1 / 16;
            bitmap.data[calcIndex(x + 1, y + 1, bitmap.width) + 1] = bitmap.data[calcIndex(x + 1, y + 1, bitmap.width) + 1] + errorGreen * 1 / 16;
            bitmap.data[calcIndex(x + 1, y + 1, bitmap.width) + 2] = bitmap.data[calcIndex(x + 1, y + 1, bitmap.width) + 2] + errorBlue * 1 / 16;
        })
    })

    bitmap.data = Buffer.from(bitmap.data);

    return bitmap;

}

function calcIndex(x, y, width) {
    return (Math.floor((x + y * width)) * 4);
}

module.exports = dither;
