{"version":3,"sources":["../src/index.js"],"names":["throwError","isNodePattern","mulTable","shgTable","blur","r","cb","call","rsum","gsum","bsum","asum","x","y","i","p","p1","p2","yp","yi","yw","pa","wm","bitmap","width","hm","height","rad1","mulSum","shgSum","red","green","blue","alpha","vmin","vmax","iterations","data"],"mappings":"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","sourcesContent":["import { throwError, isNodePattern } from '@jimp/utils';\nimport { mulTable, shgTable } from './blur-tables';\n\n/*\n    Superfast Blur (0.5)\n    http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n\n    Copyright (c) 2011 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default () => ({\n  /**\n   * A fast blur algorithm that produces similar effect to a Gaussian blur - but MUCH quicker\n   * @param {number} r the pixel radius of the blur\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  blur(r, cb) {\n    if (typeof r !== 'number')\n      return throwError.call(this, 'r must be a number', cb);\n    if (r < 1) return throwError.call(this, 'r must be greater than 0', cb);\n\n    let rsum;\n    let gsum;\n    let bsum;\n    let asum;\n    let x;\n    let y;\n    let i;\n    let p;\n    let p1;\n    let p2;\n    let yp;\n    let yi;\n    let yw;\n    let pa;\n\n    const wm = this.bitmap.width - 1;\n    const hm = this.bitmap.height - 1;\n    // const wh = this.bitmap.width * this.bitmap.height;\n    const rad1 = r + 1;\n\n    const mulSum = mulTable[r];\n    const shgSum = shgTable[r];\n\n    const red = [];\n    const green = [];\n    const blue = [];\n    const alpha = [];\n\n    const vmin = [];\n    const vmax = [];\n\n    let iterations = 2;\n\n    while (iterations-- > 0) {\n      yi = 0;\n      yw = 0;\n\n      for (y = 0; y < this.bitmap.height; y++) {\n        rsum = this.bitmap.data[yw] * rad1;\n        gsum = this.bitmap.data[yw + 1] * rad1;\n        bsum = this.bitmap.data[yw + 2] * rad1;\n        asum = this.bitmap.data[yw + 3] * rad1;\n\n        for (i = 1; i <= r; i++) {\n          p = yw + ((i > wm ? wm : i) << 2);\n          rsum += this.bitmap.data[p++];\n          gsum += this.bitmap.data[p++];\n          bsum += this.bitmap.data[p++];\n          asum += this.bitmap.data[p];\n        }\n\n        for (x = 0; x < this.bitmap.width; x++) {\n          red[yi] = rsum;\n          green[yi] = gsum;\n          blue[yi] = bsum;\n          alpha[yi] = asum;\n\n          if (y === 0) {\n            vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n            vmax[x] = (p = x - r) > 0 ? p << 2 : 0;\n          }\n\n          p1 = yw + vmin[x];\n          p2 = yw + vmax[x];\n\n          rsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n          gsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n          bsum += this.bitmap.data[p1++] - this.bitmap.data[p2++];\n          asum += this.bitmap.data[p1] - this.bitmap.data[p2];\n\n          yi++;\n        }\n\n        yw += this.bitmap.width << 2;\n      }\n\n      for (x = 0; x < this.bitmap.width; x++) {\n        yp = x;\n        rsum = red[yp] * rad1;\n        gsum = green[yp] * rad1;\n        bsum = blue[yp] * rad1;\n        asum = alpha[yp] * rad1;\n\n        for (i = 1; i <= r; i++) {\n          yp += i > hm ? 0 : this.bitmap.width;\n          rsum += red[yp];\n          gsum += green[yp];\n          bsum += blue[yp];\n          asum += alpha[yp];\n        }\n\n        yi = x << 2;\n\n        for (y = 0; y < this.bitmap.height; y++) {\n          pa = (asum * mulSum) >>> shgSum;\n          this.bitmap.data[yi + 3] = pa;\n\n          // normalize alpha\n          if (pa > 255) {\n            this.bitmap.data[yi + 3] = 255;\n          }\n\n          if (pa > 0) {\n            pa = 255 / pa;\n            this.bitmap.data[yi] = ((rsum * mulSum) >>> shgSum) * pa;\n            this.bitmap.data[yi + 1] = ((gsum * mulSum) >>> shgSum) * pa;\n            this.bitmap.data[yi + 2] = ((bsum * mulSum) >>> shgSum) * pa;\n          } else {\n            this.bitmap.data[yi + 2] = 0;\n            this.bitmap.data[yi + 1] = 0;\n            this.bitmap.data[yi] = 0;\n          }\n\n          if (x === 0) {\n            vmin[y] = ((p = y + rad1) < hm ? p : hm) * this.bitmap.width;\n            vmax[y] = (p = y - r) > 0 ? p * this.bitmap.width : 0;\n          }\n\n          p1 = x + vmin[y];\n          p2 = x + vmax[y];\n\n          rsum += red[p1] - red[p2];\n          gsum += green[p1] - green[p2];\n          bsum += blue[p1] - blue[p2];\n          asum += alpha[p1] - alpha[p2];\n\n          yi += this.bitmap.width << 2;\n        }\n      }\n    }\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"],"file":"index.js"}